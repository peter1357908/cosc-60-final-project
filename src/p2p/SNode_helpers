import binascii as btasc
from mrt import mrt


'''
A procedure that receives a message from a lower-ranking peer, decoded and responds if necessary.
Please see procedure.md for more details on the structure of our messages
'''
def msg_parser(msg):
    # Grab the data included in the message headers
    msg_type = btasc.b2a_hex(msg[0:1])
    msg_len = btasc.b2a_hex(msg[1:2])
    peer_id = btasc.b2a_hex(msg[2:4])
    ip_addr = btasc.b2a_hex(msg[4:6])
    #TODO: Add this client to some sort of list?

    # Post
    if msg_type.decode() == '0001':
        post_type = btasc.b2a_hex(msg[6:7])
        if post_type.decode() == '000a':
            # TODO: UPDATE THE DHT, COORDINATE WITH PETER
            file_size = btasc.b2a_hex(msg[6:7])
            file_id_length = btasc.b2a_hex(msg[7:8])
            file_id = btasc.b2a_hex(msg[8:9])

        if post_type.decode() == '000b':
            # TODO: REMOVE from DHT, inform of file losses, and acknowledge


    # Request
    if msg_type.decode() == '0101':
        request_type = btasc.b2a_hex(msg[6:7])
        misc = btasc.b2a_hex(msg[7:8])

        # If joining as a regular node, send only the list of current supernodes
        if request_type.decode() == '000a':
            r_misc = misc.decode()

            if r_misc == '0000':
                response_type = '100a'
                snodes_num = str(len(supernode_list))
                response = response_type+snodes_num+str(supernode_list)
                # TODO: ensure ip_addr.decode() is in the right format.
                mrt.mrt_send1(ip_addr.decode(), btasc.a2b_hex(response)) #TODO: Check what id requires i.e ip or (ip,port)
                #TODO: Structure Messages accordingly...

            elif r_misc == '0001':
                # TODO: Ensure own id not in supernode_list OR ignore it here.
                # TODO: Alternatively, only add if 0002...
                for supernode in supernode_list:
                    new_sn_msg = '000a' + '0002' + ip_addr.decode()
                    mrt.mrt_send1(supernode, btasc.a2b_hex(new_sn_msg))

            elif r_misc == '0002':
                #TODO: Ensure ip addr is in the right format, probably is not :)
                supernode_list.append(ip_addr.decode())

            else:
                #see above regarding ip
                #sends an invalid request message
                mrt.mrt_send1(ip_addr.decode(), btasc.a2b_hex('0000'))

        if request_type.decode() == '000b':
            response_type = '100b'
            snodes_num = str(len(supernode_list))
            response = response_type + snodes_num + str(supernode_list)
            # TODO: ensure ip_addr.decode() is in the right format.
            mrt.mrt_send1(ip_addr.decode(), btasc.a2b_hex(response))  # TODO: Check what id requires i.e ip or (ip,port)

        if request_type.decode() == '000c':
            #TODO: Coordinate with Peter
            mrt.mrt_send1(ip_addr, 'DHT')

        if request_type.decode() == '000d':
            #TODO: clarify approach

        if request_type.decode() == '000e':
            #TODO: clarify approach

        #TODO: Handle other request types

    # File-transfer
    if msg_type.decode() == '1111':
        #TODO: Accept file
        recv_file = msg[7:]
    # Indication of error
    if msg_type.decode() == '0000':
        # TODO: Figure out what we want to do... Perhaps have more details on what type of error this is.. Resend request? Send to different server..


#TODO: MOVE MAIN INTO SEPARATE FILE
if __name__ == '__main__':
    # Starts listening to connections
    mrt.mrt_open() #TODO: Supply host IP and appropriate PORT

    supernode_list = []

    # Keep handling requests while running
    # Accepts a connection, receives the message, and parses it
    while True:
        connection = mrt.mrt_accept1()
        message = mrt.mrt_receive1(connection)
        msg_parser(message)


